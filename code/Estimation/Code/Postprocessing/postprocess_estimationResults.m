function [ ModelSummary, ...
            ModelFuncs, ...
            paramETAS_descrip, ...
            TriggerRelationsETAS, ...
            ClustersETAS ] = postprocess_estimationResults( Catalog, ...
                                                            Inputs, ...
                                                            ModelFuncs, ...
                                                            SpatData, ...
                                                            paramETAS, ...
                                                            triggProbMatrix, ...
                                                            IterationLog )
                                                
    CatalogNoDupl = Catalog( ~Catalog.isDupl, : );
    
    %% Evaluate trigger relations 
    TriggerRelationsETAS    = evaluate_triggRelationsETAS( CatalogNoDupl, triggProbMatrix );
    ClustersETAS            = main_declustering( CatalogNoDupl, ...
                                                 TriggerRelationsETAS, ...
                                                 -1, ...
                                                 'ETAS' );
    
    %% Add model functions to ModelFuncs
    ModelFuncs = set_modelFunctions( Inputs, ModelFuncs, sqrt(paramETAS) );
    ModelFuncs = rmfield(ModelFuncs, {'fConvert_lon2x','fConvert_lat2y','fConvert_x2lon','fConvert_y2lat',...
                                      'fRestrTime_days','fTempK_factor'});
                                                    
    %% Compute Model Summary
    isTarget        = CatalogNoDupl.flag > 0;
    mu_backgrPerDay = convert_mu2backgrPerDay( CatalogNoDupl, Inputs, SpatData, paramETAS(1) );
    branchRatio     = compute_branchingRatio( CatalogNoDupl, isTarget, paramETAS(10), Inputs.TargetSettings, ModelFuncs, 'estimation' );
    % Compile struct
    ModelSummary = struct( 'nEventsObserved',           sum(isTarget), ...
                           'nEventsEstimated',          IterationLog.integratedRate(end), ...
                           'meanBackgrProb',            mean(CatalogNoDupl.backgrProb(isTarget)), ...
                           'mu_backgrPerDay',           mu_backgrPerDay, ...
                           'mu_backgrPerDayAndDegree',  mu_backgrPerDay / Inputs.TargetSettings.polyArea, ...
                           'branchRatio',               branchRatio );
                                            
    %% Printing core information
    disp('... Model Summary ...')
    disp(['Branching Ratios = ', num2str(branchRatio)])
    
    %% Parameters description
    paramETAS_descrip = table;
    paramETAS_descrip.resultParam = {'mu';'A';'alpha';'c';'p';'D';'gamma';'q';'Tb';'beta (base exp)'};
    paramETAS_descrip.unit_result = {'';'';'';'days';'';'degree^2';'';'';'days';''};
    paramETAS_descrip.iniParameter = {'mu';'A';'alpha';'c';'p';'D';'gamma';'q';'Tb';'b (base 10)'};
    paramETAS_descrip.unit_ini = {'';'';'';'days';'';'km^2';'';'';'seconds';''};
    paramETAS_descrip.convertFactor = {'';'';'';'';'';'111^2';'';'';'24*60*60';'1/log(10)'};
        
end

%% Old code pieces
%     %% Remove event duplicate and assign updated
%     isTwoStrikes = Catalog.isDupl;
%     if any(isTwoStrikes)
%         Catalog = manage_eventsWithTwoStrikes( Catalog, Catalog.id(isTwoStrikes), 'merge' );
%     end
%
%     disp(['ModelSummary.mu_backgrPerDay = ', num2str(ModelSummary.mu_backgrPerDay)])
%     disp(['ModelSummary.meanBackgrProb = ', num2str(ModelSummary.meanBackgrProb)])