function [ IterationLog, ...
            hessMatrix, ...
            Catalog, ...
            sqrtParamETAS, ...
            SpatData, ...
            hasConverged ] = optimize_davidsonFletcherPowell( Catalog, ...
                                                            Inputs, ...
                                                            ModelFuncs, ...
                                                            IterationLog, ...
                                                            hessMatrix, ...
                                                            sqrtParamETAS, ...
                                                            aggregBackgrRate, ...
                                                            SpatData, ...
                                                            TempData, ...
                                                            iIter, ...
                                                            writeLog )
    
    disp('Davidon-Fletcher-Powell procedure ...')
    
    %% Initializations 
    hasConverged    = false;
    stepLength      = 0.05;
    nParamETAS      = length(sqrtParamETAS);
    dParam          = zeros(nParamETAS,1); 
    loglik_grad0    = zeros(nParamETAS,1); 
   
    % 
    [ loglik, ...
      loglik_grad, ...
      integratedRate, ...
      SpatData.anisoPeaks ] = estimate_loglikSwitch( true, ...
                                                      Catalog, ...
                                                      Inputs, ...
                                                      ModelFuncs, ...
                                                      sqrtParamETAS, ...
                                                      aggregBackgrRate, ...
                                                      SpatData, ...
                                                      TempData, ...
                                                      true );
    
    for iOuterIter=1:9
       
       for iInnerIter = 0:7
           
           [ searchDirection, ...
             hessMatrix, ...
             stopIteration ] = optimize_searchDirection( iInnerIter, ...
                                                         iOuterIter, ...
                                                         loglik_grad, ...
                                                         loglik_grad0, ...
                                                         hessMatrix, ...
                                                         dParam );
           
           % Stopping criteria from optimize_searchDirection.m
           if stopIteration
               break;
           end
           
           % line search
           stepLength = optimize_lineSearch( Catalog, ...
                                             Inputs, ...
                                             ModelFuncs, ...
                                             sqrtParamETAS, ...
                                             searchDirection, ...
                                             loglik, ...
                                             aggregBackgrRate, ...
                                             stepLength, ...
                                             SpatData, ...
                                             TempData, ...
                                             writeLog );
                      
           dParam           = searchDirection * stepLength;
           loglik_grad0     = loglik_grad; % "Old" gradiant
           sqrtParamETAS0   = sqrtParamETAS;
           sqrtParamETAS    = sqrtParamETAS + dParam; % New theta vector
           loglik0          = loglik;
           
           [ loglik, ...
             loglik_grad, ...
             integratedRate, ...
             SpatData.anisoPeaks] = estimate_loglikSwitch( true, ...
                                                              Catalog, ...
                                                              Inputs, ...
                                                              ModelFuncs, ...
                                                              sqrtParamETAS, ...
                                                              aggregBackgrRate, ...
                                                              SpatData, ...
                                                              TempData, ...
                                                              writeLog );
                                                          
           % Individual stopping criterion
           stopIteration = round(loglik0, 1) == round(loglik, 1) ...
                        && all( abs( sqrtParamETAS.^2 ./ sqrtParamETAS0.^2 - 1 ) < 10^-3 | sqrtParamETAS==0 ) ...
                        && all( abs( sqrtParamETAS.^2 .* loglik_grad) < 1 );
                      % && sum(abs(loglik_grad)) < 1 && sum(abs(loglik_grad.*sqrtParamETAS)) < 1
                      
           if stopIteration
               disp('Results change minimal (individual criteria)')
               break;
           end 
                                            
       end
       
       % Break double loop
       if stopIteration; break; end
        
    end
    
    paramETAS    = sqrtParamETAS.^2;
    IterationLog = update_iterationLog( IterationLog, loglik, loglik_grad, ...
                                        integratedRate, paramETAS, iIter );
                                    
    %% Check whether parameter estimates have hasConverged
    if iIter > 1
        hasConverged = round( IterationLog.loglik_fval(iIter-1), 1 ) == round( -loglik, 1 ) ...
                    && all( abs( IterationLog.paramETAS(iIter-1,:)' ./ paramETAS - 1 ) < 10^-3 | paramETAS == 0 );

        if hasConverged
            % Print messages
            disp('Estimation stops since LL value and parameters have converged.')
            disp(['Integrated rate = ', num2str(integratedRate)])   
            
            % Update catalog
            ModelFuncs  = set_modelFunctions( Inputs, ModelFuncs, sqrtParamETAS );
            Catalog     = update_catalogAfterConvergence( Catalog, Inputs, ModelFuncs, paramETAS ); 
            
        end
       
    end
    
end

%% Old code pieces
% eps1    = 1.0e-6; 
% eps2    = 1.0e-6;
% tau2    = 1.0e-6;
% if sqrt( sum(loglik_grad.^2) ) > tau2
%    disp('Continues because sqrt(sum(loglik_grad.^2)) > tau2')
%    continue;
% end
% % Return criterion 3
% sum1             = sum(dParam.^2);
% if (loglik0/loglik - 1 < eps1 && sqrt(sum1) < eps2)
%    disp('Return by loglik0/loglik - 1 < eps1 && sqrt(sum1) < eps2')
%    [ IterationLog, stopEstimation ] = update_iterationLog(IterationLog, loglik, loglik_grad, integratedRate, sqrtParamETAS, hessMatrix, iIter);
%    return;
% end 



