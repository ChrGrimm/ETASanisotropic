function [ dF_D, dF_q ] = compute_isoGradientsIntegr( iSegmFactor, ...
                                                      iIsStartP, ...
                                                      iIsEndP, ...
                                                      D, q, ...
                                                      normaliz, ...
                                                      normalizSqu, ...
                                                      normaliz_D, ...
                                                      normaliz_q, ...
                                                      f_inn_r, ...
                                                      f_inn_r0, ...
                                                      f_inn_r_to1minusQ, ...
                                                      f_inn_r0_to1minusQ )

    %% Gradient by D
    % Since spatial kernel is normalized
    factor  = (1-q)/(D*normalizSqu);
    grad_r  = factor .* ( f_inn_r_to1minusQ .*  (1-f_inn_r.^(-1))  .* normaliz - (1-f_inn_r_to1minusQ)  * normaliz_D );
    grad_r0 = factor .* ( f_inn_r0_to1minusQ .* (1-f_inn_r0.^(-1)) .* normaliz - (1-f_inn_r0_to1minusQ) * normaliz_D );

    % Compute gradient by D
    dF_D       = compute_integrPerEvent( iSegmFactor, ...
                                          iIsStartP, ...
                                          iIsEndP, ...
                                          grad_r, ...
                                          grad_r0 );                                                                  

    %% Gradient by q
    % Since spatial kernel is normalized
    factor  = 1/normalizSqu;
    grad_r  = factor .* ( log(f_inn_r)  .* f_inn_r_to1minusQ  * normaliz - (1-f_inn_r_to1minusQ)  .* normaliz_q );
    grad_r0 = factor .* ( log(f_inn_r0) .* f_inn_r0_to1minusQ * normaliz - (1-f_inn_r0_to1minusQ) .* normaliz_q );

    % Compute gradient by q
    dF_q   = compute_integrPerEvent( iSegmFactor, ...
                                          iIsStartP, ...
                                          iIsEndP, ...
                                          grad_r, ...
                                          grad_r0 );
                                      
end

%% Old code pieces
% % If spatial kernel is not normalized
% grad_r  = (1-q)/D * f_inn_r_to1minusQ .* (1-f_inn_r.^(-1));
% grad_r0 = (1-q)/D * f_inn_r0_to1minusQ .* (1-f_inn_r0.^(-1));
% 
% % If spatial kernel is not normalized
% grad_r     = log(f_inn_r) .* f_inn_r_to1minusQ;
% grad_r0    = log(f_inn_r0) .* f_inn_r0_to1minusQ;


