function [ sample_integrAniso, ...
            sample_integrIso, ...
            sample_gradAniso_dD, ...
            sample_gradIso_dD, ...
            sample_gradAniso_dQ, ...
            sample_gradIso_dQ, ...
            distGrid_integr, ...
            distGrid_grad, ...
            anisoPeaks ] = compute_anisoIntegrSamples( isGradiants, ...
                                                         spatParamETAS, ...
                                                         magnSample4anisoIntegr, ...
                                                         anisoPeaks, ...
                                                         fSpatK_inn, ...
                                                         fSpatK_factor )

    %% Preparations and initializations
    % Perform plausibility checks (time-consuming!)
    checkDetailed = false;
    
    % Extract spatial parameters
    D       = spatParamETAS(1);
    gamma   = spatParamETAS(2);
    q       = spatParamETAS(3);  
    
    % Distance grid
    nDistGrid_integr= 250;
    nDistGrid_grad  = 500;
    nMagnSample     = length(magnSample4anisoIntegr);
    distGrid_integr = zeros(nDistGrid_integr, nMagnSample);
    distGrid_grad   = zeros(nDistGrid_grad, nMagnSample);

    % Output arrays
    sample_integrAniso  = zeros(nDistGrid_integr, nMagnSample);
    sample_integrIso    = zeros(nDistGrid_integr, nMagnSample);
    sample_gradAniso_dD = zeros(nDistGrid_grad, nMagnSample);
    sample_gradIso_dD   = zeros(nDistGrid_grad, nMagnSample);
    sample_gradAniso_dQ = zeros(nDistGrid_grad, nMagnSample);
    sample_gradIso_dQ   = zeros(nDistGrid_grad, nMagnSample);
    
    %% Compute integral and gradiant samples
    % Loop over unique magnitudes in catalog
    for i = 1:size(magnSample4anisoIntegr,1)
        
        % Extract current magnitude, rupture length, wdith factor and
        % spatial extent
        iMag                = magnSample4anisoIntegr(i,1);
        iRupL               = magnSample4anisoIntegr(i,2);
        iR                  = magnSample4anisoIntegr(i,3);
%         % Compute distribution width and compare to minimum width
%         spatDistrWidth      = D*exp(gamma*(iMag-M_c)); 
%         isWiderThanMinWidth = spatDistrWidth > SpatKernel.minKernelWidth;
        % Extract peak positions
        peak_integr         = anisoPeaks(i,1);
        peak_grad           = anisoPeaks(i,2);
        
        % Compute distance grid
        [ distGrid_integr(:,i), ...
          distGrid_grad(:,i) ] = create_anisoDistGrid( peak_integr, ...
                                                        peak_grad, ...
                                                        nDistGrid_integr, ...
                                                        nDistGrid_grad, ...
                                                        iR, ...
                                                        isGradiants );       
        % Define function handles
        [ F_integr, ...
           F_integr_dD, ...
           F_integr_dQ, ...
           f_densAniso, ...
           f_densAniso_dD, ...
           f_densAniso_dQ, ...
           f_densIso, ...
           f_densIso_dD, ...
           f_densIso_dQ ] = define_anisoFuncHandles( fSpatK_inn, ...
                                                    fSpatK_factor, ...
                                                    spatParamETAS, ...
                                                    iR, ...
                                                    iMag, ...
                                                    iRupL, ...
                                                    isGradiants, ...
                                                    checkDetailed );
        
        % Evaluate function handles   
        [ sample_integrAniso(:,i), ...
           sample_integrIso(:,i), ...
           sample_gradAniso_dD(:,i), ...
           sample_gradIso_dD(:,i), ...
           sample_gradAniso_dQ(:,i), ...
           sample_gradIso_dQ(:,i) ] = evaluate_anisoFuncHandles( distGrid_integr(:,i), ...
                                                                distGrid_grad(:,i), ...
                                                                F_integr, ...
                                                                F_integr_dD, ...
                                                                F_integr_dQ, ...
                                                                f_densAniso, ...
                                                                f_densAniso_dD, ...
                                                                f_densAniso_dQ, ...
                                                                f_densIso, ...
                                                                f_densIso_dD, ...
                                                                f_densIso_dQ, ...
                                                                isGradiants, ...
                                                                checkDetailed, ...
                                                                iMag, ...
                                                                iRupL, ...
                                                                iR );  
                                                                    
        %% Detect peaks in curves to prepare distance grid for next iteration
        % integral samples
        idxF_aniso      = find( sample_integrAniso(:,i) / sample_integrAniso(end,i) >= 0.99, 1);
        idxF_iso        = find( sample_integrIso(:,i)   / sample_integrIso(end,i)   >= 0.99, 1);
        anisoPeaks(i,1) = distGrid_integr( max([idxF_aniso, idxF_iso] ), i);

        % gradiant samples
        if isGradiants
            % Local minimum for derivative by D
            [~,idxD_aniso]  = min(sample_gradAniso_dD(:,i));
            [~,idxD_iso]    = min(sample_gradIso_dD(:,i));
            % Local maximum for derivative by q
            [~,idxQ_aniso]  = max(sample_gradAniso_dQ(:,i));   
            [~,idxQ_iso]    = max(sample_gradIso_dQ(:,i)); 
            anisoPeaks(i,2) = distGrid_grad( max([idxD_aniso,idxD_iso,idxQ_aniso,idxQ_iso] ), i);            
        end

    end

end
