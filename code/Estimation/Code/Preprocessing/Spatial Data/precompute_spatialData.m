function [ SpatData, ...
           Catalog ] = precompute_spatialData( Catalog, Inputs, ModelFuncs )

    SpatData    = struct;
    SpatData.id = Catalog.id;
    
    makeChecks  = true;
    makePlots   = false;
    
    %% Bandwidth and Gaussian density
    [ SpatData.bandwidth, ...
      SpatData.gaussDensity ] = precompute_backgrSpatDistr( Catalog, ...
                                                            Inputs.SpaceSettings.spaceUnit, ...
                                                            Inputs.ModelSettings.spaceModel );
    
    %% Isotropic mode data and precomputation of spatial integrals of background distribution
    [ SpatData, ...
      Catalog.typeKernel ] = precompute_isoPolygonGrid( SpatData, ...
                                                        Inputs.TargetSettings.polygonXY, ...
                                                        Catalog, ...
                                                        Inputs.ModelSettings.spaceModel, ...
                                                        Inputs.SpaceSettings.spaceUnit, ...
                                                        makeChecks, ...
                                                        makePlots );

    %% If model is run in anisotropic mode Anisotropic data
    if ~Inputs.SpaceSettings.detailedIntegral
        % By definition, infinite space is assumed
        Catalog.typeKernel(:) = {'full'};
        
    elseif any( strcmp(Catalog.typeKernel, 'aniso') )
        % Compute event-to-polygon distances in anisotropic mode
        [ SpatData, ...
          Catalog.typeKernel ]  = precompute_anisoPolygonGrid( SpatData, ...
                                                               Catalog, ...
                                                               Inputs.TargetSettings.polygonXY', ...
                                                               Inputs.SpaceSettings.spaceUnit, ...
                                                               makeChecks, ...
                                                               makePlots );
        % Store unique vector of magnitudes and according rupture lengths (needed later)
        isAniso = strcmp(Catalog.typeKernel, 'aniso');
        [ SpatData.magnSample4anisoIntegr, ...
            SpatData.anisoPeaks ] = create_magnSample4anisoIntegr( Catalog.mag(isAniso), ...
                                                                   ModelFuncs );  

    end
    
end