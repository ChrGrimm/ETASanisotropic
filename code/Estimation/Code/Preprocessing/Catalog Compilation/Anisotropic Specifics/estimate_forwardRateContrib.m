function [ forwardRateContrib_sum, ...
           forwardRateContrib_logl, ...
           nEvents, ...
           spatK_inn_ij, ...
           tempK_inn_ij, ...
           lambda_trig, ...
           jEvTimeSpace, ...
           dist ] = estimate_forwardRateContrib( isInTime, ...
                                                  iAnisoEvent, ...
                                                  x, y, mag, rupExtent, ...
                                                  iEvent, ...
                                                  spaceUnit, ...
                                                  spatWindow, ...
                                                  rupStart, rupEnd, ...
                                                  minDist, ...
                                                  ModelFuncs, ...
                                                  q )
                                                  
     % Find related events that are within certain temporal and spatial window
    jEventsInTime   = find(isInTime(:,iAnisoEvent));
    isInSpace       = getDistance( x(jEventsInTime), y(jEventsInTime), ...
                                   x(iEvent), y(iEvent), spaceUnit) <= spatWindow; 
    jEvTimeSpace    = jEventsInTime( isInSpace );

    if ~isempty(jEvTimeSpace)

        %% Spatial distance computations
        % Compute distance between current event's rupture line and related events
        dist = get_dist2line( rupStart( iAnisoEvent, : ), ...
                              rupEnd( iAnisoEvent, : ), ...
                              [ x(jEvTimeSpace), y(jEvTimeSpace) ]', ...
                              spaceUnit, ...
                              0 );

        % Apply min distance to avoid dominating impact of single, very close events
        dist = max( dist', minDist ); 

        % Squared distances
        dist2 = dist.^2;

        %% Calculate trigger rates contributed from past events to event iEvent
        % Evaluate inner spatial function
        spatK_inn_ij    = ModelFuncs.fSpatK_inn( dist, dist2, mag(iEvent), rupExtent(iEvent) );

        % Evaluate forward trigger rate contribution of event iEvent
        lambda_trig = spatK_inn_ij.^(-q); % factor(iEvent) .*
        
        %% Update output matrices
        % Distributed forward rate
        forwardRateContrib_sum  = sum( lambda_trig );
        forwardRateContrib_logl = prod( spatK_inn_ij.^(-q) );
        % Number of events in time-space window
        nEvents                 = length(jEvTimeSpace);  
%                 nEventsNearby( iAnisoEvent, iStrike )   = sum(dist <= 0.25*rupExtent(iEvent));

    else
        forwardRateContrib_sum  = 0;
        forwardRateContrib_logl = 0;
        nEvents                 = 0;
        spatK_inn_ij            = 0;
        tempK_inn_ij            = 0;
        lambda_trig             = 0;
        
    end
                                                  
end