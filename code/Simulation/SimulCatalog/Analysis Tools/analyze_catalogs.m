function newData = analyze_catalogs( Catalog, ...
                                        DoubletCriteria, ...
                                        spaceUnit, ...
                                        SimulSettings, ...
                                        catalogID, ...
                                        isSynthetic )

    %% Extract input data
%     startDate       = SimulSettings.timeWindow(1);
%     timeWindow_days = SimulSettings.timeWindow_days;
%     polyArea        = SimulSettings.polyArea;
    
    %% Fill output table
    newData                 = table;

    % Catalog ID
    newData.catalogID       = catalogID;
    
    % Number of (target) events
    newData.nEvents         = size(Catalog, 1);
    isTarget                = Catalog.flag == 1;
    newData.nTargetEvents   = sum(isTarget);
    
%     % Percentage of triggered events
%     newData.percTriggered   = sum(isTarget & Catalog.triggerID > 0) / sum(isTarget);
    
    % Largest magnitudes
    sortedMagns             = sort(Catalog.mag(isTarget), 'descend');
    newData.largestMagn     = sortedMagns(1);
    newData.secondMagn      = sortedMagns(2);
    newData.nLarger5        = sum( sortedMagns>=5 );
    
%     % Temporal Volatility
    newData.tempVolatility  = 0;
%     newData.tempVolatility  = evaluate_temporalClustering( Catalog, isTarget, startDate );
    
%     % Spatial volatility
    newData.spatVolatility{1}  = 0;
%     newData.spatVolatility  = evaluate_spatialClustering( Catalog, isTarget, catalogID, -1, polyArea );
%     newData.spatialDistr{1} = 0;
    newData.spatialDistr{1} = evaluate_spatialEventDistrib( Catalog.x(isTarget), ...
                                                            Catalog.y(isTarget), ...
                                                            SimulSettings.xGrid, ...
                                                            SimulSettings.yGrid );

    newData.doubletSampleSize{1} = 0;
    newData.doubletPercentage{1} = 0;
    newData.doubletType{1} = 0;
    newData.bathLawMagnDiff{1} = 0;
    newData.bathLawType{1} = 0;
    
%     % Doublets and Bath law
%     [ newData.doubletSampleSize{1}, ...
%       newData.doubletPercentage{1}, ...
%       newData.doubletType{1}, ...
%       newData.bathLawMagnDiff{1}, ...
%       newData.bathLawType{1} ] = compute_doubletAndBathLawStatistics( Catalog, ...
%                                                                        DoubletCriteria, ...
%                                                                        timeWindow_days, ...
%                                                                        spaceUnit, ...
%                                                                        isSynthetic );

%     % Doublet Analysis
%     [ nEventsPerMagnRange{1}, ...
%       percDoublets025{1}, ...
%       percDoublets04{1}, ...
%       percDoublets10{1}, ...
%       eventRelation04{1} ] = identify_doublets( Catalog, ...
%                                             spaceUnit, ...
%                                             DoubletCriteria );
%     
%     [ bathLawResults{1}, ...
%         eventRelationBathLaw{1} ] = evaluate_bathLawDiffInCatalog(Catalog, timeWindow_days, spaceUnit);
       
%     %% Update tAnalysis
%     newData = table(catalogID, nEvents, nTargetEvents, percTriggered, largestMagn, secondMagn, ...
%                     tempVolatility, spatVolatility, bathLawResults, eventRelationBathLaw, ...
%                     nEventsPerMagnRange, percDoublets025, percDoublets04, percDoublets10, eventRelation04);
% %     tAnalysis = [tAnalysis; newData];
    
end